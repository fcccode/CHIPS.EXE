#!/usr/bin/env python3
# cgraph - construct the call graph of an asm file
import sys

# very hacky
# makes the following assumptions:
# - segments start with 'SEGMENT CODE ; n' where n is the segment number
# - functions are preceded by a comment containing their address
# - calls are followed by a line comment of the form '; <addr> <targetaddr>'

# usage:
#  tools/cgraph <seg2.asm <logic.asm <movement.asm | unflatten | dot -Tsvg >calls.svg
#

def ishex(s):
    return all(c in "0123456789abcdef" for c in s)

def isaddr(s):
    return all(c in "0123456789abcdef:" for c in s)

print("digraph code {")
print("node [shape=box];")
print("layout=dot;")
print("rankdir=LR;")
currentfunc = "top"
lastfuncaddr = "0"
lastsegment = "?"
edges = set()
for line in sys.stdin:
    words = line.strip().split()
    if not words:
        continue
    if line[0] == ';' and len(words)==2 and ishex(words[1]):
        lastfuncaddr = words[1].zfill(4)
    if words[0] == "SEGMENT":
        lastsegment = words[3]
    if words[0] == "func" or words[0].endswith(":") and "%" not in words[0]:
        if words[0] == "func":
            label = words[1]
        else:
            label = words[0].strip(":")
        if label.startswith("FUN_"):
            addr = label[4:].replace("_", ":", 1)
            label = addr
        else:
            addr = lastsegment+":"+lastfuncaddr.zfill(4)

        if not label.startswith('.'):
            currentfunc = addr
            shape = "box"
            print("  \"{}\" [label=\"{}\", shape={}, color=blue]".format(addr, label, shape))
    if words[0] == "call":
        if ":" in words[1]:
            seg, addr = words[1].split(":", 1)
            if len(words) > 4 and isaddr(words[4]):
                #addr = words[4]
                target = words[4]
            elif len(words) > 3:
                target = words[-1]
            else:
                target = addr
            if ":" in target:
                a,b = target.replace(":0x",":").split(":",1)
                target = a+":"+b.zfill(4)
            if not target.startswith(("USER.", "KERNEL.", "GDI.")):
                edge = (currentfunc, target)
                if edge not in edges:
                    print("  \"{}\" -> \"{}\";".format(currentfunc, target))
                    edges.add(edge)
print("}")
